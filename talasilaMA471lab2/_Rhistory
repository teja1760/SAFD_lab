d3
X[100]^beta
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = c()
for(i in 1:length(X))
{
d3[i] = X[i]^beta
}
d3 = sum(X^beta)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
z <- outer(x, y, function(x,y) L(x,y,X))
warnings()
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = vector(n)
for(i in 1:length(X))
{
d3[i] = X[i]^beta
}
d3 = sum(X^beta)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
z <- outer(x, y, function(x,y) L(x,y,X))
d3 = vector(3)
d3 = zeros(4)
d3 = zero(4)
d3 = array(4)
d3
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = vector(n)
for(i in 1:length(X))
{
d3[i] = X[i]^beta
}
d3 = sum(X^beta)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = vector(,n)
for(i in 1:length(X))
{
d3[i] = X[i]^beta
}
d3 = sum(X^beta)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
z <- outer(x, y, function(x,y) L(x,y,X))
warnings()
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = sum(X^beta)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
outer(xseq,yseq,function(x,y) L(x,y,X))
xseq = seq(0.1,10,0.1)
yseq = xseq
outer(xseq,yseq,function(x,y) L(x,y,X))
z
persp(xseq,yseq,z)
z = outer(xseq,yseq,function(x,y) L(x,y,X))
persp(xseq,yseq,z)
persp(xseq,yseq,z,theta = 45)
persp(xseq,yseq,z,theta = 45,phi = 45)
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),z,theta = 45,phi = 45)
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),,theta = 45,phi = 45)
z = outer(seq(0.1,5,0.1),seq(0.1,2,0.1),function(x,y) L(x,y,X))
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),,theta = 45,phi = 45)
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),z,theta = 45,phi = 45)
zz = outer(seq(0.1,5,0.1),seq(0.1,2,0.1),function(x,y) 0)
zz = outer(seq(0.1,5,0.1),seq(0.1,2,0.1),function(x,y) 0*x*y)
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),zz,theta = 45,phi = 45,add=T)
persp(seq(0.1,5,0.1),seq(0.1,2,0.1),zz,theta = 45,phi = 45)
contour(x,y,x)
contour(xseq,yseq,x)
contour(xseq,yseq,z)
contour(seq(0.1,5,0.1),seq(0.1,2,0.1),z)
contour(seq(0.1,5,0.1),seq(0.1,2,0.1),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)))
contour(seq(0.01,5,0.01),seq(0.01,2,0.01),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)))
contour(seq(0.01,5,0.01),seq(0.01,2,0.01),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)),nlevels = 20)
contour(seq(0.01,5,0.01),seq(0.01,2,0.01),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)),nlevels = 200)
contour(seq(0.01,5,0.01),seq(0.01,2,0.01),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)),nlevels = 200)
contour(seq(0.01,5,0.01),seq(0.01,2,0.01),outer(seq(0.01,5,0.01),seq(0.01,2,0.01),function(x,y) L(x,y,X)),nlevels = 400)
source('~/Desktop/SAFD lab/r.somaniMA471lab2/prob1.R')
for(i in 1:4)
{
est = est_param(rweibull(sample_sizes[i],shape,scale))
cat(est[1]," ",est[2],"\n")
}
source('~/Desktop/SAFD lab/r.somaniMA471lab2/prob1.R')
source('~/Desktop/SAFD lab/r.somaniMA471lab2/prob1.R')
source('~/Desktop/SAFD lab/r.somaniMA471lab2/prob1.R')
curve(function(x) L_beta(x,X))
X
X = A[,2]
curve(function(x) L_beta(x,X))
curve(function(x) L_beta(x,X))
curve(function(x) L_beta(x,X),from = 0,to=10)
curve(function(x) L_beta(x,X),from = 0,to=10)
x
curve(function(x) L_beta(x,X),from = 0,to=10)
curve(sin(x),from = 0,to=10)
curve(function(x) L_beta(x,X),from = 0,to=10)
L_beta(2,X)
X = rweibull(20,2,1)
curve(function(x) L_beta(x,X),from = 0,to=10)
L_beta(2,X)
curve(function(x) L_beta(x,X),from = 0,to=10)
L_beta(c(2,3),X)
L_beta(c(2,3,4),X)
xseq = seq(0.1,10,0.1)
yseq = c()
for(i in length(xseq))
yseq = c(yseq,L_beta(xseq(i),X))
xseq
yseq = c(yseq,L_beta(xseq[i],X))
yseq = c()
for(i in length(xseq))
yseq = c(yseq,L_beta(xseq[i],X))
yseq
yseq = c()
for(i in 1:length(xseq))
yseq = c(yseq,L_beta(xseq[i],X))
plot(xseq,yseq)
plot(xseq,yseq,type="l")
library(plot3  D)
library(plot3 D)
library(plot3D)
library(plotly)
xseq = seq(1.5,2.5,0.1)
yseq = seq(0.5,1.5,0.1)
zfun <- function(x,y) L(x,y,X)
zfun(2,1)
zfun(2,2)
z = outer(xseq,yseq,FUN = zfun)
abline(0,0)
L <- function(beta, theta, X)
{
n = length(X)
d1 = sum(log(X))
d3 = X^beta
d3 = vector(,n)
for(i in 1:n)
d3[i] = X[i]^beta
d3 = sum(d3)
return(n*log(beta) + n*beta*log(theta) + (beta-1)*d1 - (theta^beta)*d3 )
}
zfun(2,1)
z = outer(xseq,yseq,FUN = zfun)
warnings()
z
persp(xseq,yseq,zfun)
persp(xseq,yseq,z)
zfun(1.8,1)
zfun(2,1)
zfun(2.5,1)
zfun(2.1,1)
zfun(2,1.1)
zfun(2,0.9)
zfun(2,0.8)
z
max(z)
rw = rweibull(200,shape,scale)
X = Y = seq(0.01,1,length=100)
n=length(rw)
likelihood = function(x,y){
L(x,y,rw)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
rw = rweibull(200,shape,scale)
X = seq(1.0,3.0,0.1)
Y = seq(0.5,1.5,0.1)
n=length(rw)
likelihood = function(x,y){
L(x,y,rw)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
rw = rweibull(200,shape,scale)
X = seq(1.0,5.0,0.1)
Y = seq(0.5,1.5,0.1)
n=length(rw)
likelihood = function(x,y){
L(x,y,rw)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
rw = rweibull(200,shape,scale)
X = seq(1.0,10,0.1)
Y = seq(0.5,1.5,0.1)
n=length(rw)
likelihood = function(x,y){
L(x,y,rw)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
rw = rweibull(200,shape,scale)
X = seq(1.0,10,0.1)
Y = seq(0.5,1.5,0.1)
n=length(rw)
likelihood = function(x,y){
n*log(x*y^x) + (x-1)*sum(log(rw)) + sum((y*rw)^x)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
rw = rweibull(200,shape,scale)
X = seq(1.0,3,0.1)
Y = seq(0.5,1.5,0.1)
n=length(rw)
likelihood = function(x,y){
n*log(x*y^x) + (x-1)*sum(log(rw)) + sum((y*rw)^x)
}
Z = outer(X,Y,likelihood)
persp(X,Y,Z)
L_beta(2,X)
L_beta_prime(2,X)
L_beta_prime(2.1,X)
L_beta_prime(2.1,X)
L_beta_prime(1.9,X)
X = rw(200,2,1)
X = rweibull(200,2,1)
L_beta_prime(1.9,X)
L_beta_prime(2.1,X)
L_beta_prime(2,X)
L_beta(2,X)
L_beta(2.1,X)
library(fBasics)
library(fBasics)
install.packages("fBasics")
A <- read.table("d-csp0108.txt", header=TRUE)
n = nrow(A)
X = A[,2]
X
library(fBasics)
kurtosis(X)
kurtosis(X)[1]
mean((X-mean(X)/sd(X)^4)
)
mean((X-mean(X)/sd(X))^4)
mean( ( (X-mean(X)) / sd(X) )^4 )
?kurtosis
mean( ( (X-mean(X)) / sd(X) )^4 ) -3
kurtosis(X)
kurtosis(X)[]1
kurtosis(X)[1]
l ibrary(MASS)
l ibrary(stats)
library(MASS)
library(stats)
library(MASS)
library(stats)
options(warn=-1)
A <- read.table("d-csp0108.txt", header=TRUE)
n = nrow(A)
A
X  = A[,2]
hist(X,probability = T,100,main = "Density fits",xlim = c(quantile(X,0.01),quantile(X,0.99)))
hist(X,probability = T,100,main = "Density fits")
hist(X,probability = T,100,main = "Density fits",xlim = c(quantile(X,0.01),quantile(X,0.99)))
munorm = mean(X)
std = sd(X)
curve(dnorm(x,munorm,std),add = TRUE,col=1)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
curve(mydt(x,m,s,df),add=T,col=2)
?fitdistr
a
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
curve(mydt(x,m,s,df),add=T,col=2)
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
curve(dexp(x,muexp,b),add=T,col=3)
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
curve(dexp(x,muexp,b),add=T,col=3)
hist(X,probability = T,100,main = "Density fits",xlim = c(quantile(X,0.01),quantile(X,0.99)))
munorm = mean(X)
std = sd(X)
curve(dnorm(x,munorm,std),add = TRUE,col=1)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
curve(mydt(x,m,s,df),add=T,col=2)
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
curve(dexp(x,muexp,b),add=T,col=3)
dexp <- function(x,mu,b)
{
return((1/(2*b))*exp( - (abs(x-mu)/b)) )
}
dexp <- function(x,mu,b)
{
return((1/(2*b))*exp( - (abs(x-mu)/b)) )
}
pdexp <- function(x,mu,b)
{
z = (x-mu)/b
return(ifelse(x<mu,0.5*exp(z),1-0.5*exp(-z)))
}
qdexp <- function(x,mu,b)
{
return(mu+ifelse(x<0.5,b*log(2*x),-b*log(2-2*x)))
}
dmixnormal <- function(x,m1,s1,m2,s2,p)
{
return(p*dnorm(x,m1,s1)+(1-p)*dnorm(x,m2,s2))
}
dmymixestimate <- function(x,X)
{
munorm = mean(X)
std = sd(X)
return(dmixnormal(x,munorm,std,munorm,std/3,0.4))
}
pmixnormal <- function(x,m1,s1,m2,s2,p)
{
return(p*pnorm(x,m1,s1)+(1-p)*pnorm(x,m2,s2))
}
pmymixestimate <- function(x,X)
{
munorm = mean(X)
std = sd(X)
return(pmixnormal(x,munorm,std,munorm,std/3,0.4))
}
rmixnormal <- function(n,m1,s1,m2,s2,p)
{
x = vector(,n)
for(i in 1:n)
{
u = runif(1,0,1)
if(u<p)
x[i] = rnorm(1,m1,s1)
else
x[i] = rnorm(1,m2,s2)
}
return(x)
}
qmixnormal <- function(x,m1,s1,m2,s2,p)
{
X = rmixnormal(10000,m1,s1,m2,s2,p)
return(quantile(X,x))
}
qmymixestimate <- function(x,X)
{
munorm = mean(X)
std = sd(X)
return(qmixnormal(x,munorm,std,munorm,std/3,0.4))
}
curve(dexp(x,muexp,b),add=T,col=3)
a = fitdistr(X,"cauchy")
a = fitdistr(X,"cauchy")
mucauchy = a$estimate[1]
gamma = a$estimate[2]
curve(dcauchy(x,location = mucauchy,scale = gamma),add=T,col=4)
curve(dmymixestimate(x,X),add=T,col=5)
legend('topright', legend = c("Normal","t","double exp","cauchy","mixed normal"),lty=1, col=c(1,2,3,4,5), bty='n', cex=.75)
scatter.smooth(A[,2])
plot(A[,2])
scatter.smooth(A[,2])
plot(A[,2])
scatter.smooth(A[,2])
scatter.smooth(A[,3])
fit_dist(A[,2])
fit_dist <- function(X)
{
hist(X,probability = T,100,main = "Density fits",xlim = c(quantile(X,0.01),quantile(X,0.99)))
munorm = mean(X)
std = sd(X)
curve(dnorm(x,munorm,std),add = TRUE,col=1)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
curve(mydt(x,m,s,df),add=T,col=2)
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
curve(dexp(x,muexp,b),add=T,col=3)
a = fitdistr(X,"cauchy")
mucauchy = a$estimate[1]
gamma = a$estimate[2]
curve(dcauchy(x,location = mucauchy,scale = gamma),add=T,col=4)
curve(dmymixestimate(x,X),add=T,col=5)
legend('topright', legend = c("Normal","t","double exp","cauchy","mixed normal"),lty=1, col=c(1,2,3,4,5), bty='n', cex=.75)
}
fit_dist(A[,2])
fit_dist(A[,3])
scdf = ecdf(X)
scdf
surv <- function(x) return(1-scdf(x))
munorm = mean(X)
std = sd(X)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
a = fitdistr(X,"cauchy")
mucauchy = a$estimate[1]
gamma = a$estimate[2]
mypt <- function(x, m, s, df) pt((x-m)/s, df)
curve(surv(x),from = quantile(X,f),to = quantile(X,t),lty=1,lwd=1)
f = 0
t = 1
curve(surv(x),from = quantile(X,f),to = quantile(X,t),lty=1,lwd=1)
curve(surv(x),from = quantile(X,0.95),to = quantile(X,1),lty=1,lwd=1)
curve(surv(x),from = quantile(X,f),to = quantile(X,t),lty=1,lwd=1)
curve(1-pnorm(x,munorm,std),add=T,col=2,lty=2,lwd=2)
curve(1-mypt(x,m,s,df),add=T,col=3,lty=2,lwd=2)
curve(1-pdexp(x,muexp,b),add=T,col=4,lty=2,lwd=2)
curve(1-pcauchy(x,location = mucauchy,scale = gamma),add=T,col=5,lty=2,lwd=2)
curve(1-pmymixestimate(x,X),add=T,col=6,lty=2,lwd=2)
legend('topright', legend = c("Normal","t","double exp","cauchy","mix normal"),lty=1, col=c(2,3,4,5,6), bty='n', cex=.75)
munorm = mean(X)
std = sd(X)*n/(n-1)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
a = fitdistr(X,"cauchy")
mucauchy = a$estimate[1]
gamma = a$estimate[2]
myqt <- function(x,m,s,df) s*qt(x,df)+m
xseq = seq(0,1,0.01)
x = quantile(X,xseq)
x
y1 = qnorm(xseq,munorm,std)
y1
y2 = myqt(xseq,m,s,df)
y3 = qdexp(xseq,muexp,b)
y4 = qcauchy(xseq,location = mucauchy,scale = gamma)
y5 = qmymixestimate(xseq,X)
par(mfrow=c(3,2))
plot(x,y1,type = "l",col=2,ylab = "Normal Distribution",lwd=2)
abline(0,1)
plot(x,y2,type = "l",col=2,ylab = "t Distribution",lwd=2)
abline(0,1)
plot(x,y3,type = "l",col=2,ylab = "Laplace Distribution",lwd=2)
abline(0,1)
plot(x,y4,type = "l",col=2,ylab = "Cauchy Distribution",lwd=2)
abline(0,1)
plot(x,y5,type = "l",col=2,ylab = "Mix Normal Distribution",lwd=2)
abline(0,1)
par(mfrow=c(1,1))
QQ <- function(X)
{
munorm = mean(X)
std = sd(X)*n/(n-1)
a = fitdistr(X, "t", start = list(m=mean(X),s=sd(X), df=2), lower=c(-1, 0.001,1))[1]
m = a$estimate[1]
s = a$estimate[2]
df = a$estimate[3]
muexp = median(X)
N = length(X)
b = sum(abs(X-muexp))/N
a = fitdistr(X,"cauchy")
mucauchy = a$estimate[1]
gamma = a$estimate[2]
myqt <- function(x,m,s,df) s*qt(x,df)+m
xseq = seq(0,1,0.01)
x = quantile(X,xseq)
y1 = qnorm(xseq,munorm,std)
y2 = myqt(xseq,m,s,df)
y3 = qdexp(xseq,muexp,b)
y4 = qcauchy(xseq,location = mucauchy,scale = gamma)
y5 = qmymixestimate(xseq,X)
par(mfrow=c(3,2))
plot(x,y1,type = "l",col=2,ylab = "Normal Distribution",lwd=2)
abline(0,1)
plot(x,y2,type = "l",col=2,ylab = "t Distribution",lwd=2)
abline(0,1)
plot(x,y3,type = "l",col=2,ylab = "Laplace Distribution",lwd=2)
abline(0,1)
plot(x,y4,type = "l",col=2,ylab = "Cauchy Distribution",lwd=2)
abline(0,1)
plot(x,y5,type = "l",col=2,ylab = "Mix Normal Distribution",lwd=2)
abline(0,1)
par(mfrow=c(1,1))
}
QQ(A[,3])
survival(A[,2])
survival(A[,3])
